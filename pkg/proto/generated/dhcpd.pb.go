// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dhcpd.proto

package godhcpd

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DHCPD struct {
	Device               string    `protobuf:"bytes,1,opt,name=Device,proto3" json:"Device,omitempty"`
	Subnets              []*Subnet `protobuf:"bytes,2,rep,name=Subnets,proto3" json:"Subnets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DHCPD) Reset()         { *m = DHCPD{} }
func (m *DHCPD) String() string { return proto.CompactTextString(m) }
func (*DHCPD) ProtoMessage()    {}
func (*DHCPD) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f4f7f9a47f6dd7, []int{0}
}

func (m *DHCPD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPD.Unmarshal(m, b)
}
func (m *DHCPD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPD.Marshal(b, m, deterministic)
}
func (m *DHCPD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPD.Merge(m, src)
}
func (m *DHCPD) XXX_Size() int {
	return xxx_messageInfo_DHCPD.Size(m)
}
func (m *DHCPD) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPD.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPD proto.InternalMessageInfo

func (m *DHCPD) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *DHCPD) GetSubnets() []*Subnet {
	if m != nil {
		return m.Subnets
	}
	return nil
}

type Subnet struct {
	Network              string   `protobuf:"bytes,1,opt,name=Network,proto3" json:"Network,omitempty"`
	Netmask              string   `protobuf:"bytes,2,opt,name=Netmask,proto3" json:"Netmask,omitempty"`
	Range                *Range   `protobuf:"bytes,3,opt,name=Range,proto3" json:"Range,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subnet) Reset()         { *m = Subnet{} }
func (m *Subnet) String() string { return proto.CompactTextString(m) }
func (*Subnet) ProtoMessage()    {}
func (*Subnet) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f4f7f9a47f6dd7, []int{1}
}

func (m *Subnet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subnet.Unmarshal(m, b)
}
func (m *Subnet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subnet.Marshal(b, m, deterministic)
}
func (m *Subnet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subnet.Merge(m, src)
}
func (m *Subnet) XXX_Size() int {
	return xxx_messageInfo_Subnet.Size(m)
}
func (m *Subnet) XXX_DiscardUnknown() {
	xxx_messageInfo_Subnet.DiscardUnknown(m)
}

var xxx_messageInfo_Subnet proto.InternalMessageInfo

func (m *Subnet) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *Subnet) GetNetmask() string {
	if m != nil {
		return m.Netmask
	}
	return ""
}

func (m *Subnet) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

type Range struct {
	Start                string   `protobuf:"bytes,1,opt,name=Start,proto3" json:"Start,omitempty"`
	End                  string   `protobuf:"bytes,2,opt,name=End,proto3" json:"End,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f4f7f9a47f6dd7, []int{2}
}

func (m *Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Range.Unmarshal(m, b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Range.Marshal(b, m, deterministic)
}
func (m *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(m, src)
}
func (m *Range) XXX_Size() int {
	return xxx_messageInfo_Range.Size(m)
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *Range) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

type DHCPDManaged struct {
	Id                   string    `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Device               string    `protobuf:"bytes,2,opt,name=Device,proto3" json:"Device,omitempty"`
	Subnets              []*Subnet `protobuf:"bytes,3,rep,name=Subnets,proto3" json:"Subnets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DHCPDManaged) Reset()         { *m = DHCPDManaged{} }
func (m *DHCPDManaged) String() string { return proto.CompactTextString(m) }
func (*DHCPDManaged) ProtoMessage()    {}
func (*DHCPDManaged) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f4f7f9a47f6dd7, []int{3}
}

func (m *DHCPDManaged) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPDManaged.Unmarshal(m, b)
}
func (m *DHCPDManaged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPDManaged.Marshal(b, m, deterministic)
}
func (m *DHCPDManaged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPDManaged.Merge(m, src)
}
func (m *DHCPDManaged) XXX_Size() int {
	return xxx_messageInfo_DHCPDManaged.Size(m)
}
func (m *DHCPDManaged) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPDManaged.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPDManaged proto.InternalMessageInfo

func (m *DHCPDManaged) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DHCPDManaged) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *DHCPDManaged) GetSubnets() []*Subnet {
	if m != nil {
		return m.Subnets
	}
	return nil
}

type DHCPDManagerListArgs struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPDManagerListArgs) Reset()         { *m = DHCPDManagerListArgs{} }
func (m *DHCPDManagerListArgs) String() string { return proto.CompactTextString(m) }
func (*DHCPDManagerListArgs) ProtoMessage()    {}
func (*DHCPDManagerListArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f4f7f9a47f6dd7, []int{4}
}

func (m *DHCPDManagerListArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPDManagerListArgs.Unmarshal(m, b)
}
func (m *DHCPDManagerListArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPDManagerListArgs.Marshal(b, m, deterministic)
}
func (m *DHCPDManagerListArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPDManagerListArgs.Merge(m, src)
}
func (m *DHCPDManagerListArgs) XXX_Size() int {
	return xxx_messageInfo_DHCPDManagerListArgs.Size(m)
}
func (m *DHCPDManagerListArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPDManagerListArgs.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPDManagerListArgs proto.InternalMessageInfo

type DHCPDManagerGetArgs struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPDManagerGetArgs) Reset()         { *m = DHCPDManagerGetArgs{} }
func (m *DHCPDManagerGetArgs) String() string { return proto.CompactTextString(m) }
func (*DHCPDManagerGetArgs) ProtoMessage()    {}
func (*DHCPDManagerGetArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f4f7f9a47f6dd7, []int{5}
}

func (m *DHCPDManagerGetArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPDManagerGetArgs.Unmarshal(m, b)
}
func (m *DHCPDManagerGetArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPDManagerGetArgs.Marshal(b, m, deterministic)
}
func (m *DHCPDManagerGetArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPDManagerGetArgs.Merge(m, src)
}
func (m *DHCPDManagerGetArgs) XXX_Size() int {
	return xxx_messageInfo_DHCPDManagerGetArgs.Size(m)
}
func (m *DHCPDManagerGetArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPDManagerGetArgs.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPDManagerGetArgs proto.InternalMessageInfo

func (m *DHCPDManagerGetArgs) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DHCPDManagerCreateReply struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPDManagerCreateReply) Reset()         { *m = DHCPDManagerCreateReply{} }
func (m *DHCPDManagerCreateReply) String() string { return proto.CompactTextString(m) }
func (*DHCPDManagerCreateReply) ProtoMessage()    {}
func (*DHCPDManagerCreateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f4f7f9a47f6dd7, []int{6}
}

func (m *DHCPDManagerCreateReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPDManagerCreateReply.Unmarshal(m, b)
}
func (m *DHCPDManagerCreateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPDManagerCreateReply.Marshal(b, m, deterministic)
}
func (m *DHCPDManagerCreateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPDManagerCreateReply.Merge(m, src)
}
func (m *DHCPDManagerCreateReply) XXX_Size() int {
	return xxx_messageInfo_DHCPDManagerCreateReply.Size(m)
}
func (m *DHCPDManagerCreateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPDManagerCreateReply.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPDManagerCreateReply proto.InternalMessageInfo

func (m *DHCPDManagerCreateReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DHCPDManagerListReply struct {
	DHCPDsManaged        []*DHCPDManaged `protobuf:"bytes,1,rep,name=DHCPDsManaged,proto3" json:"DHCPDsManaged,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DHCPDManagerListReply) Reset()         { *m = DHCPDManagerListReply{} }
func (m *DHCPDManagerListReply) String() string { return proto.CompactTextString(m) }
func (*DHCPDManagerListReply) ProtoMessage()    {}
func (*DHCPDManagerListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f4f7f9a47f6dd7, []int{7}
}

func (m *DHCPDManagerListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPDManagerListReply.Unmarshal(m, b)
}
func (m *DHCPDManagerListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPDManagerListReply.Marshal(b, m, deterministic)
}
func (m *DHCPDManagerListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPDManagerListReply.Merge(m, src)
}
func (m *DHCPDManagerListReply) XXX_Size() int {
	return xxx_messageInfo_DHCPDManagerListReply.Size(m)
}
func (m *DHCPDManagerListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPDManagerListReply.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPDManagerListReply proto.InternalMessageInfo

func (m *DHCPDManagerListReply) GetDHCPDsManaged() []*DHCPDManaged {
	if m != nil {
		return m.DHCPDsManaged
	}
	return nil
}

func init() {
	proto.RegisterType((*DHCPD)(nil), "godhcpd.DHCPD")
	proto.RegisterType((*Subnet)(nil), "godhcpd.Subnet")
	proto.RegisterType((*Range)(nil), "godhcpd.Range")
	proto.RegisterType((*DHCPDManaged)(nil), "godhcpd.DHCPDManaged")
	proto.RegisterType((*DHCPDManagerListArgs)(nil), "godhcpd.DHCPDManagerListArgs")
	proto.RegisterType((*DHCPDManagerGetArgs)(nil), "godhcpd.DHCPDManagerGetArgs")
	proto.RegisterType((*DHCPDManagerCreateReply)(nil), "godhcpd.DHCPDManagerCreateReply")
	proto.RegisterType((*DHCPDManagerListReply)(nil), "godhcpd.DHCPDManagerListReply")
}

func init() { proto.RegisterFile("dhcpd.proto", fileDescriptor_87f4f7f9a47f6dd7) }

var fileDescriptor_87f4f7f9a47f6dd7 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xd1, 0x4e, 0xc2, 0x40,
	0x10, 0xa4, 0xad, 0x94, 0xb8, 0x28, 0x9a, 0x15, 0xb0, 0x21, 0x6a, 0x9a, 0x8b, 0x26, 0xf0, 0x82,
	0x09, 0x3e, 0xca, 0x8b, 0x01, 0x83, 0x18, 0x35, 0xa6, 0xf8, 0x03, 0x07, 0xbd, 0x54, 0x82, 0xb6,
	0xe4, 0x7a, 0x6a, 0xfc, 0x4e, 0x7f, 0xc8, 0x70, 0x77, 0x25, 0x57, 0x2c, 0xf1, 0xad, 0xb3, 0x33,
	0x37, 0x3b, 0xb3, 0x29, 0x54, 0xc3, 0xd7, 0xd9, 0x32, 0xec, 0x2e, 0x79, 0x22, 0x12, 0xac, 0x44,
	0x89, 0x84, 0xe4, 0x1e, 0xca, 0xc3, 0xbb, 0xc1, 0xf3, 0x10, 0x9b, 0xe0, 0x0e, 0xd9, 0xe7, 0x7c,
	0xc6, 0x3c, 0xcb, 0xb7, 0xda, 0xbb, 0x81, 0x46, 0xd8, 0x81, 0xca, 0xe4, 0x63, 0x1a, 0x33, 0x91,
	0x7a, 0xb6, 0xef, 0xb4, 0xab, 0xbd, 0x83, 0xae, 0x7e, 0xdb, 0x55, 0xf3, 0x20, 0xe3, 0xc9, 0x14,
	0x5c, 0xf5, 0x89, 0x1e, 0x54, 0x9e, 0x98, 0xf8, 0x4a, 0xf8, 0x42, 0xbb, 0x65, 0x50, 0x33, 0xef,
	0x34, 0x5d, 0x78, 0xf6, 0x9a, 0x59, 0x41, 0x3c, 0x87, 0x72, 0x40, 0xe3, 0x88, 0x79, 0x8e, 0x6f,
	0xb5, 0xab, 0xbd, 0xda, 0x7a, 0x8d, 0x9c, 0x06, 0x8a, 0x24, 0x97, 0x5a, 0x85, 0x75, 0x28, 0x4f,
	0x04, 0xe5, 0x42, 0x2f, 0x50, 0x00, 0x0f, 0xc1, 0xb9, 0x8d, 0x43, 0x6d, 0xbd, 0xfa, 0x24, 0x14,
	0xf6, 0x64, 0xc1, 0x47, 0x1a, 0xd3, 0x88, 0x85, 0x58, 0x03, 0x7b, 0x1c, 0xea, 0x47, 0xf6, 0x38,
	0x34, 0x7a, 0xdb, 0xdb, 0x7a, 0x3b, 0xff, 0xf4, 0x6e, 0x42, 0xdd, 0x58, 0xc1, 0x1f, 0xe6, 0xa9,
	0xb8, 0xe1, 0x51, 0x4a, 0x2e, 0xe0, 0xc8, 0x9c, 0x8f, 0x98, 0x1c, 0x6f, 0x26, 0x20, 0x1d, 0x38,
	0x36, 0x65, 0x03, 0xce, 0xa8, 0x60, 0x01, 0x5b, 0xbe, 0x7d, 0xff, 0x91, 0xbe, 0x40, 0x63, 0x73,
	0x93, 0x12, 0x5e, 0xc3, 0xbe, 0x24, 0x52, 0x5d, 0xd3, 0xb3, 0x64, 0xe6, 0xc6, 0x3a, 0xb3, 0x79,
	0x83, 0x20, 0xaf, 0xed, 0xfd, 0x58, 0xb9, 0x1b, 0x71, 0xec, 0x83, 0xab, 0x52, 0x60, 0x2d, 0x6f,
	0xd0, 0xf2, 0x8b, 0x0c, 0xcd, 0xc8, 0xa4, 0x84, 0x23, 0xd8, 0x59, 0x05, 0xc3, 0xd3, 0x42, 0x6d,
	0x76, 0x9d, 0xd6, 0xd9, 0x56, 0x3a, 0x33, 0xea, 0x83, 0x33, 0x62, 0x02, 0x4f, 0x0a, 0x85, 0xfa,
	0x9a, 0xad, 0xe2, 0x8a, 0xa4, 0x34, 0x75, 0xe5, 0x9f, 0x7e, 0xf5, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x72, 0x24, 0xbf, 0x84, 0xf8, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DHCPDManagerClient is the client API for DHCPDManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DHCPDManagerClient interface {
	Create(ctx context.Context, in *DHCPD, opts ...grpc.CallOption) (*DHCPDManagerCreateReply, error)
	List(ctx context.Context, in *DHCPDManagerListArgs, opts ...grpc.CallOption) (*DHCPDManagerListReply, error)
	Get(ctx context.Context, in *DHCPDManagerGetArgs, opts ...grpc.CallOption) (*DHCPDManaged, error)
}

type dHCPDManagerClient struct {
	cc *grpc.ClientConn
}

func NewDHCPDManagerClient(cc *grpc.ClientConn) DHCPDManagerClient {
	return &dHCPDManagerClient{cc}
}

func (c *dHCPDManagerClient) Create(ctx context.Context, in *DHCPD, opts ...grpc.CallOption) (*DHCPDManagerCreateReply, error) {
	out := new(DHCPDManagerCreateReply)
	err := c.cc.Invoke(ctx, "/godhcpd.DHCPDManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPDManagerClient) List(ctx context.Context, in *DHCPDManagerListArgs, opts ...grpc.CallOption) (*DHCPDManagerListReply, error) {
	out := new(DHCPDManagerListReply)
	err := c.cc.Invoke(ctx, "/godhcpd.DHCPDManager/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPDManagerClient) Get(ctx context.Context, in *DHCPDManagerGetArgs, opts ...grpc.CallOption) (*DHCPDManaged, error) {
	out := new(DHCPDManaged)
	err := c.cc.Invoke(ctx, "/godhcpd.DHCPDManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHCPDManagerServer is the server API for DHCPDManager service.
type DHCPDManagerServer interface {
	Create(context.Context, *DHCPD) (*DHCPDManagerCreateReply, error)
	List(context.Context, *DHCPDManagerListArgs) (*DHCPDManagerListReply, error)
	Get(context.Context, *DHCPDManagerGetArgs) (*DHCPDManaged, error)
}

// UnimplementedDHCPDManagerServer can be embedded to have forward compatible implementations.
type UnimplementedDHCPDManagerServer struct {
}

func (*UnimplementedDHCPDManagerServer) Create(ctx context.Context, req *DHCPD) (*DHCPDManagerCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedDHCPDManagerServer) List(ctx context.Context, req *DHCPDManagerListArgs) (*DHCPDManagerListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedDHCPDManagerServer) Get(ctx context.Context, req *DHCPDManagerGetArgs) (*DHCPDManaged, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterDHCPDManagerServer(s *grpc.Server, srv DHCPDManagerServer) {
	s.RegisterService(&_DHCPDManager_serviceDesc, srv)
}

func _DHCPDManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHCPD)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPDManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/godhcpd.DHCPDManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPDManagerServer).Create(ctx, req.(*DHCPD))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPDManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHCPDManagerListArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPDManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/godhcpd.DHCPDManager/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPDManagerServer).List(ctx, req.(*DHCPDManagerListArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPDManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHCPDManagerGetArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPDManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/godhcpd.DHCPDManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPDManagerServer).Get(ctx, req.(*DHCPDManagerGetArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _DHCPDManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "godhcpd.DHCPDManager",
	HandlerType: (*DHCPDManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DHCPDManager_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DHCPDManager_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DHCPDManager_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhcpd.proto",
}
