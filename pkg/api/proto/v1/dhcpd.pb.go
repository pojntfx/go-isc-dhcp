// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: dhcpd.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DHCPD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device  string    `protobuf:"bytes,1,opt,name=Device,proto3" json:"Device,omitempty"`
	Subnets []*Subnet `protobuf:"bytes,2,rep,name=Subnets,proto3" json:"Subnets,omitempty"`
}

func (x *DHCPD) Reset() {
	*x = DHCPD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcpd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHCPD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCPD) ProtoMessage() {}

func (x *DHCPD) ProtoReflect() protoreflect.Message {
	mi := &file_dhcpd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCPD.ProtoReflect.Descriptor instead.
func (*DHCPD) Descriptor() ([]byte, []int) {
	return file_dhcpd_proto_rawDescGZIP(), []int{0}
}

func (x *DHCPD) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DHCPD) GetSubnets() []*Subnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network           string   `protobuf:"bytes,1,opt,name=Network,proto3" json:"Network,omitempty"`
	Netmask           string   `protobuf:"bytes,2,opt,name=Netmask,proto3" json:"Netmask,omitempty"`
	NextServer        string   `protobuf:"bytes,3,opt,name=NextServer,proto3" json:"NextServer,omitempty"`
	Filename          string   `protobuf:"bytes,4,opt,name=Filename,proto3" json:"Filename,omitempty"`
	Routers           string   `protobuf:"bytes,5,opt,name=Routers,proto3" json:"Routers,omitempty"`
	DomainNameServers []string `protobuf:"bytes,6,rep,name=DomainNameServers,proto3" json:"DomainNameServers,omitempty"`
	Range             *Range   `protobuf:"bytes,7,opt,name=Range,proto3" json:"Range,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcpd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_dhcpd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_dhcpd_proto_rawDescGZIP(), []int{1}
}

func (x *Subnet) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Subnet) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

func (x *Subnet) GetNextServer() string {
	if x != nil {
		return x.NextServer
	}
	return ""
}

func (x *Subnet) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Subnet) GetRouters() string {
	if x != nil {
		return x.Routers
	}
	return ""
}

func (x *Subnet) GetDomainNameServers() []string {
	if x != nil {
		return x.DomainNameServers
	}
	return nil
}

func (x *Subnet) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=Start,proto3" json:"Start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=End,proto3" json:"End,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcpd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_dhcpd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_dhcpd_proto_rawDescGZIP(), []int{2}
}

func (x *Range) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *Range) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type DHCPDManaged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string    `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Device  string    `protobuf:"bytes,2,opt,name=Device,proto3" json:"Device,omitempty"`
	Subnets []*Subnet `protobuf:"bytes,3,rep,name=Subnets,proto3" json:"Subnets,omitempty"`
}

func (x *DHCPDManaged) Reset() {
	*x = DHCPDManaged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcpd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHCPDManaged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCPDManaged) ProtoMessage() {}

func (x *DHCPDManaged) ProtoReflect() protoreflect.Message {
	mi := &file_dhcpd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCPDManaged.ProtoReflect.Descriptor instead.
func (*DHCPDManaged) Descriptor() ([]byte, []int) {
	return file_dhcpd_proto_rawDescGZIP(), []int{3}
}

func (x *DHCPDManaged) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DHCPDManaged) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DHCPDManaged) GetSubnets() []*Subnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type DHCPDManagerListArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DHCPDManagerListArgs) Reset() {
	*x = DHCPDManagerListArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcpd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHCPDManagerListArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCPDManagerListArgs) ProtoMessage() {}

func (x *DHCPDManagerListArgs) ProtoReflect() protoreflect.Message {
	mi := &file_dhcpd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCPDManagerListArgs.ProtoReflect.Descriptor instead.
func (*DHCPDManagerListArgs) Descriptor() ([]byte, []int) {
	return file_dhcpd_proto_rawDescGZIP(), []int{4}
}

type DHCPDManagedId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DHCPDManagedId) Reset() {
	*x = DHCPDManagedId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcpd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHCPDManagedId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCPDManagedId) ProtoMessage() {}

func (x *DHCPDManagedId) ProtoReflect() protoreflect.Message {
	mi := &file_dhcpd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCPDManagedId.ProtoReflect.Descriptor instead.
func (*DHCPDManagedId) Descriptor() ([]byte, []int) {
	return file_dhcpd_proto_rawDescGZIP(), []int{5}
}

func (x *DHCPDManagedId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DHCPDManagerListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DHCPDsManaged []*DHCPDManaged `protobuf:"bytes,1,rep,name=DHCPDsManaged,proto3" json:"DHCPDsManaged,omitempty"`
}

func (x *DHCPDManagerListReply) Reset() {
	*x = DHCPDManagerListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcpd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHCPDManagerListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCPDManagerListReply) ProtoMessage() {}

func (x *DHCPDManagerListReply) ProtoReflect() protoreflect.Message {
	mi := &file_dhcpd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCPDManagerListReply.ProtoReflect.Descriptor instead.
func (*DHCPDManagerListReply) Descriptor() ([]byte, []int) {
	return file_dhcpd_proto_rawDescGZIP(), []int{6}
}

func (x *DHCPDManagerListReply) GetDHCPDsManaged() []*DHCPDManaged {
	if x != nil {
		return x.DHCPDsManaged
	}
	return nil
}

var File_dhcpd_proto protoreflect.FileDescriptor

var file_dhcpd_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c,
	0x69, 0x78, 0x2e, 0x67, 0x6f, 0x49, 0x53, 0x43, 0x44, 0x48, 0x43, 0x50, 0x22, 0x60, 0x0a, 0x05,
	0x44, 0x48, 0x43, 0x50, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a,
	0x07, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66,
	0x65, 0x6c, 0x69, 0x78, 0x2e, 0x67, 0x6f, 0x49, 0x53, 0x43, 0x44, 0x48, 0x43, 0x50, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x07, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x22, 0xfc,
	0x01, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a,
	0x0a, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x3a, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78, 0x2e, 0x67, 0x6f, 0x49, 0x53, 0x43, 0x44, 0x48, 0x43, 0x50,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x2f, 0x0a,
	0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x45, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22, 0x77,
	0x0a, 0x0c, 0x44, 0x48, 0x43, 0x50, 0x44, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f,
	0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78, 0x2e, 0x67, 0x6f,
	0x49, 0x53, 0x43, 0x44, 0x48, 0x43, 0x50, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x07,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x48, 0x43, 0x50, 0x44,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x67, 0x73, 0x22,
	0x20, 0x0a, 0x0e, 0x44, 0x48, 0x43, 0x50, 0x44, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x64, 0x22, 0x6a, 0x0a, 0x15, 0x44, 0x48, 0x43, 0x50, 0x44, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0d, 0x44, 0x48,
	0x43, 0x50, 0x44, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78, 0x2e, 0x67, 0x6f, 0x49, 0x53, 0x43, 0x44, 0x48, 0x43,
	0x50, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x44, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x52, 0x0d,
	0x44, 0x48, 0x43, 0x50, 0x44, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x32, 0xb3, 0x03,
	0x0a, 0x0c, 0x44, 0x48, 0x43, 0x50, 0x44, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x5f,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78, 0x2e, 0x67,
	0x6f, 0x49, 0x53, 0x43, 0x44, 0x48, 0x43, 0x50, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x44, 0x1a, 0x2d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66,
	0x65, 0x6c, 0x69, 0x78, 0x2e, 0x67, 0x6f, 0x49, 0x53, 0x43, 0x44, 0x48, 0x43, 0x50, 0x2e, 0x44,
	0x48, 0x43, 0x50, 0x44, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x64, 0x22, 0x00, 0x12,
	0x73, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f,
	0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78, 0x2e, 0x67, 0x6f,
	0x49, 0x53, 0x43, 0x44, 0x48, 0x43, 0x50, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x44, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x34, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c,
	0x69, 0x78, 0x2e, 0x67, 0x6f, 0x49, 0x53, 0x43, 0x44, 0x48, 0x43, 0x50, 0x2e, 0x44, 0x48, 0x43,
	0x50, 0x44, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69,
	0x78, 0x2e, 0x67, 0x6f, 0x49, 0x53, 0x43, 0x44, 0x48, 0x43, 0x50, 0x2e, 0x44, 0x48, 0x43, 0x50,
	0x44, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x64, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78,
	0x2e, 0x67, 0x6f, 0x49, 0x53, 0x43, 0x44, 0x48, 0x43, 0x50, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x44,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78, 0x2e, 0x67, 0x6f, 0x49, 0x53, 0x43, 0x44,
	0x48, 0x43, 0x50, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x44, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x49, 0x64, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6a, 0x74, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x2e, 0x66, 0x65, 0x6c, 0x69, 0x78, 0x2e, 0x67, 0x6f, 0x49, 0x53, 0x43, 0x44, 0x48,
	0x43, 0x50, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x44, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49,
	0x64, 0x22, 0x00, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x6f, 0x6a, 0x6e, 0x74, 0x66, 0x78, 0x2f, 0x67, 0x6f, 0x2d, 0x69, 0x73, 0x63,
	0x2d, 0x64, 0x68, 0x63, 0x70, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dhcpd_proto_rawDescOnce sync.Once
	file_dhcpd_proto_rawDescData = file_dhcpd_proto_rawDesc
)

func file_dhcpd_proto_rawDescGZIP() []byte {
	file_dhcpd_proto_rawDescOnce.Do(func() {
		file_dhcpd_proto_rawDescData = protoimpl.X.CompressGZIP(file_dhcpd_proto_rawDescData)
	})
	return file_dhcpd_proto_rawDescData
}

var file_dhcpd_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_dhcpd_proto_goTypes = []interface{}{
	(*DHCPD)(nil),                 // 0: com.pojtinger.felix.goISCDHCP.DHCPD
	(*Subnet)(nil),                // 1: com.pojtinger.felix.goISCDHCP.Subnet
	(*Range)(nil),                 // 2: com.pojtinger.felix.goISCDHCP.Range
	(*DHCPDManaged)(nil),          // 3: com.pojtinger.felix.goISCDHCP.DHCPDManaged
	(*DHCPDManagerListArgs)(nil),  // 4: com.pojtinger.felix.goISCDHCP.DHCPDManagerListArgs
	(*DHCPDManagedId)(nil),        // 5: com.pojtinger.felix.goISCDHCP.DHCPDManagedId
	(*DHCPDManagerListReply)(nil), // 6: com.pojtinger.felix.goISCDHCP.DHCPDManagerListReply
}
var file_dhcpd_proto_depIdxs = []int32{
	1, // 0: com.pojtinger.felix.goISCDHCP.DHCPD.Subnets:type_name -> com.pojtinger.felix.goISCDHCP.Subnet
	2, // 1: com.pojtinger.felix.goISCDHCP.Subnet.Range:type_name -> com.pojtinger.felix.goISCDHCP.Range
	1, // 2: com.pojtinger.felix.goISCDHCP.DHCPDManaged.Subnets:type_name -> com.pojtinger.felix.goISCDHCP.Subnet
	3, // 3: com.pojtinger.felix.goISCDHCP.DHCPDManagerListReply.DHCPDsManaged:type_name -> com.pojtinger.felix.goISCDHCP.DHCPDManaged
	0, // 4: com.pojtinger.felix.goISCDHCP.DHCPDManager.Create:input_type -> com.pojtinger.felix.goISCDHCP.DHCPD
	4, // 5: com.pojtinger.felix.goISCDHCP.DHCPDManager.List:input_type -> com.pojtinger.felix.goISCDHCP.DHCPDManagerListArgs
	5, // 6: com.pojtinger.felix.goISCDHCP.DHCPDManager.Get:input_type -> com.pojtinger.felix.goISCDHCP.DHCPDManagedId
	5, // 7: com.pojtinger.felix.goISCDHCP.DHCPDManager.Delete:input_type -> com.pojtinger.felix.goISCDHCP.DHCPDManagedId
	5, // 8: com.pojtinger.felix.goISCDHCP.DHCPDManager.Create:output_type -> com.pojtinger.felix.goISCDHCP.DHCPDManagedId
	6, // 9: com.pojtinger.felix.goISCDHCP.DHCPDManager.List:output_type -> com.pojtinger.felix.goISCDHCP.DHCPDManagerListReply
	3, // 10: com.pojtinger.felix.goISCDHCP.DHCPDManager.Get:output_type -> com.pojtinger.felix.goISCDHCP.DHCPDManaged
	5, // 11: com.pojtinger.felix.goISCDHCP.DHCPDManager.Delete:output_type -> com.pojtinger.felix.goISCDHCP.DHCPDManagedId
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_dhcpd_proto_init() }
func file_dhcpd_proto_init() {
	if File_dhcpd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dhcpd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHCPD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcpd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcpd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcpd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHCPDManaged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcpd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHCPDManagerListArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcpd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHCPDManagedId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcpd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHCPDManagerListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dhcpd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dhcpd_proto_goTypes,
		DependencyIndexes: file_dhcpd_proto_depIdxs,
		MessageInfos:      file_dhcpd_proto_msgTypes,
	}.Build()
	File_dhcpd_proto = out.File
	file_dhcpd_proto_rawDesc = nil
	file_dhcpd_proto_goTypes = nil
	file_dhcpd_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DHCPDManagerClient is the client API for DHCPDManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DHCPDManagerClient interface {
	Create(ctx context.Context, in *DHCPD, opts ...grpc.CallOption) (*DHCPDManagedId, error)
	List(ctx context.Context, in *DHCPDManagerListArgs, opts ...grpc.CallOption) (*DHCPDManagerListReply, error)
	Get(ctx context.Context, in *DHCPDManagedId, opts ...grpc.CallOption) (*DHCPDManaged, error)
	Delete(ctx context.Context, in *DHCPDManagedId, opts ...grpc.CallOption) (*DHCPDManagedId, error)
}

type dHCPDManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewDHCPDManagerClient(cc grpc.ClientConnInterface) DHCPDManagerClient {
	return &dHCPDManagerClient{cc}
}

func (c *dHCPDManagerClient) Create(ctx context.Context, in *DHCPD, opts ...grpc.CallOption) (*DHCPDManagedId, error) {
	out := new(DHCPDManagedId)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felix.goISCDHCP.DHCPDManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPDManagerClient) List(ctx context.Context, in *DHCPDManagerListArgs, opts ...grpc.CallOption) (*DHCPDManagerListReply, error) {
	out := new(DHCPDManagerListReply)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felix.goISCDHCP.DHCPDManager/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPDManagerClient) Get(ctx context.Context, in *DHCPDManagedId, opts ...grpc.CallOption) (*DHCPDManaged, error) {
	out := new(DHCPDManaged)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felix.goISCDHCP.DHCPDManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPDManagerClient) Delete(ctx context.Context, in *DHCPDManagedId, opts ...grpc.CallOption) (*DHCPDManagedId, error) {
	out := new(DHCPDManagedId)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felix.goISCDHCP.DHCPDManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHCPDManagerServer is the server API for DHCPDManager service.
type DHCPDManagerServer interface {
	Create(context.Context, *DHCPD) (*DHCPDManagedId, error)
	List(context.Context, *DHCPDManagerListArgs) (*DHCPDManagerListReply, error)
	Get(context.Context, *DHCPDManagedId) (*DHCPDManaged, error)
	Delete(context.Context, *DHCPDManagedId) (*DHCPDManagedId, error)
}

// UnimplementedDHCPDManagerServer can be embedded to have forward compatible implementations.
type UnimplementedDHCPDManagerServer struct {
}

func (*UnimplementedDHCPDManagerServer) Create(context.Context, *DHCPD) (*DHCPDManagedId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedDHCPDManagerServer) List(context.Context, *DHCPDManagerListArgs) (*DHCPDManagerListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedDHCPDManagerServer) Get(context.Context, *DHCPDManagedId) (*DHCPDManaged, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDHCPDManagerServer) Delete(context.Context, *DHCPDManagedId) (*DHCPDManagedId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterDHCPDManagerServer(s *grpc.Server, srv DHCPDManagerServer) {
	s.RegisterService(&_DHCPDManager_serviceDesc, srv)
}

func _DHCPDManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHCPD)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPDManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pojtinger.felix.goISCDHCP.DHCPDManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPDManagerServer).Create(ctx, req.(*DHCPD))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPDManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHCPDManagerListArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPDManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pojtinger.felix.goISCDHCP.DHCPDManager/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPDManagerServer).List(ctx, req.(*DHCPDManagerListArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPDManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHCPDManagedId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPDManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pojtinger.felix.goISCDHCP.DHCPDManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPDManagerServer).Get(ctx, req.(*DHCPDManagedId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPDManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHCPDManagedId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPDManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pojtinger.felix.goISCDHCP.DHCPDManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPDManagerServer).Delete(ctx, req.(*DHCPDManagedId))
	}
	return interceptor(ctx, in, info, handler)
}

var _DHCPDManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.pojtinger.felix.goISCDHCP.DHCPDManager",
	HandlerType: (*DHCPDManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DHCPDManager_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DHCPDManager_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DHCPDManager_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DHCPDManager_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhcpd.proto",
}
